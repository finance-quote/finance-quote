Finance::Quote FAQ
Paul Fenwick (pjf at cpan.org)

0. TABLE OF CONTENTS
====================
	0. Table of Contents.
	1. Where's the Finance::Quote webpage?
	2. Where can I get a beginner's introduction to F::Q?
	3. What does it mean if "make test" fails?
	4. How can I use proxyauth (experimental)?
	5. Is there anything similar to F::Q in other languages?
	6. Where can I get more help?

1. Where is the Finance::Quote webpage?
=======================================
	http://finance-quote.sourceforge.net/

2. Where can I get a beginner's introduction to F::Q?
=====================================================
	A good beginner's guide is the Finance::Quote article in
	The Perl Journal (http://www.tpj.com/) edition #19.  If you
	don't have a subscription to TPJ, you can also read the
	final draft of this essay at
	<http://finance-quote.sourceforge.net/documentation.html>.

3. What does it mean if "make test" fails?
==========================================
	Finance::Quote performs a number of tests to try and ensure good
	operation of its modules.  These rely upon a good network connection
	and the quote-sources providing the data used for testing.  Sometimes,
	a test will fail intermittently, this is sometimes caused by a
	slow link or network congestion, and is nothing to be worried
	about.

	If a particular test continues to fail, then it may indicate a
	problem.  Normally a failed test only indicates a problem with
	a particular module, and this will only affect you if you're
	using that module to obtain data.  Sometimes, if you're using
	failover support (which is on by default), this isn't even an
	issue.

	Before each version of F::Q is released, checks are made to ensure
	that all tests are passed.  Sometimes the data that F::Q uses for
	its tests becomes invalid (eg, if a stock no longer exists).  In
	this case it will be corrected in the next version of F::Q.

	If you think you've found a bug, or want to know if others are
	experiencing similar problems to you, you can visit the F::Q
	bug-tracking system via
	    http://finance-quote.sourceforge.net/developer.html

4. How can I use proxyauth (experimental)?
==========================================
	WARNING: THIS SUPPORT IS EXPERIMENTAL AND SYNTAX _WILL_ CHANGE IN
	         THE FUTURE.  USE AT YOUR OWN RISK.

	Finance::Quote provides experimental support for authenticated
	proxies.  If you wish to try this, then put the following at the
	top of your script.

		use Finance::Quote;
		$Finance::Quote::USE_EXPERIMENTAL_UA = 1;

	This adds extra features on top of the regular LWP::UserAgent
	class.  In particular, you can now do things like this:

	my $q = Finance::Quote->new();
	$q->user_agent->default_headers->proxy_authorization_basic($user,$pass);

	The result of $q->user_agent->default_headers is a HTTP::Headers
	object, and can use all the regular HTTP::Headers methods.
	This object is used as a template for any new HTTP requests made by
	Finance::Quote.

5. Is there anything similar to F::Q in other languages?
========================================================

	Vidyut Luther has written a stock-lookup library in PHP.  It's
	available at <http://www.gotslack.com/stocks/>

	Bill Bell has written a stock-lookup library in Java.  It's
	available at <http://www.aboutbillbell.com/>.  Follow the
	"Code Downloads" link in the left sidebar.

6. Where can I get more help?
=============================
	If you haven't already done so, try the Finance::Quote webpage
	at <http://finance-quote.sourceforge.net/>.  There are also lots
	of fun things like bug-tracking systems, support requests, forums,
	and other goodies at <https://sourceforge.net/projects/finance-quote/>.

	Finally, you can always try sending mail to the Finance::Quote
	developer's list, at <finance-quote-devel@lists.sourceforge.net>.
	The archives of this list are available on-line at
	<http://sourceforge.net/mail/?group_id=4232>.
